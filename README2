# Garb & Glitz - Inventory Management Dashboard

A modern, responsive inventory management dashboard built with React 18, Vite, Tailwind CSS, and React Router.

## Features

- ðŸ“Š **Dashboard** - Overview of key metrics and statistics
- ðŸ“¦ **Product Management** - Add, edit, and view product details
- ðŸ’° **Sales Tracking** - Record and monitor sales transactions
- ðŸ“ˆ **Inventory Management** - Track stock levels and alerts
- ðŸ”® **Demand Forecasting** - Predict future inventory needs
- ðŸ“Š **Analytics & Reports** - Generate insights from your data

## Tech Stack

- **React 18** - Modern React with hooks
- **Vite 5** - Lightning-fast build tool
- **Tailwind CSS** - Utility-first CSS framework
- **React Router 6** - Client-side routing
- **Axios** - HTTP client for API requests
- **Recharts** - Data visualization library
- **Lucide React** - Beautiful icon library
- **Headless UI** - Unstyled, accessible UI components

## Getting Started

### Prerequisites

- Node.js 18+ 
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd inventory-dashboard
```

2. Install dependencies:
```bash
npm install
```

3. Create environment file:
```bash
cp .env.example .env
```

4. Update `.env` with your API URL:
```
VITE_API_URL=http://localhost:8000
```

### Development

Start the development server:
```bash
npm run dev
```

The app will be available at `http://localhost:3000`

### Build

Create a production build:
```bash
npm run build
```

Preview the production build:
```bash
npm run preview
```

## Project Structure

```
inventory-dashboard/
â”œâ”€â”€ public/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â””â”€â”€ client.js          # Axios API client
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ common/             # Reusable components
â”‚   â”‚   â”‚   â”œâ”€â”€ Button.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Input.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Card.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Table.jsx
â”‚   â”‚   â”‚   â””â”€â”€ LoadingSpinner.jsx
â”‚   â”‚   â””â”€â”€ layout/             # Layout components
â”‚   â”‚       â”œâ”€â”€ Layout.jsx
â”‚   â”‚       â”œâ”€â”€ Navbar.jsx
â”‚   â”‚       â””â”€â”€ Sidebar.jsx
â”‚   â”œâ”€â”€ pages/                  # Page components
â”‚   â”‚   â”œâ”€â”€ Dashboard.jsx
â”‚   â”‚   â””â”€â”€ PlaceholderPages.jsx
â”‚   â”œâ”€â”€ App.jsx                 # Main app component
â”‚   â”œâ”€â”€ main.jsx               # Entry point
â”‚   â””â”€â”€ index.css              # Global styles
â”œâ”€â”€ index.html
â”œâ”€â”€ package.json
â”œâ”€â”€ vite.config.js
â”œâ”€â”€ tailwind.config.js
â””â”€â”€ postcss.config.js
```

## Component Usage

### Button
```jsx
import Button from './components/common/Button';

<Button variant="primary" size="md" onClick={handleClick}>
  Click Me
</Button>
```

### Input
```jsx
import Input from './components/common/Input';

<Input
  label="Product Name"
  name="name"
  value={value}
  onChange={handleChange}
  required
/>
```

### Card
```jsx
import Card from './components/common/Card';

<Card header="Title" footer={<Button>Action</Button>}>
  Content goes here
</Card>
```

### Table
```jsx
import Table from './components/common/Table';

const columns = [
  { key: 'name', label: 'Name' },
  { key: 'price', label: 'Price' },
];

<Table columns={columns} data={data} onRowClick={handleRowClick} />
```

## Dark Mode

The app supports dark mode out of the box. Toggle dark mode by adding the `dark` class to the `<html>` element:

```javascript
document.documentElement.classList.toggle('dark');
```

## API Integration

The app uses Axios for API requests. Configure the base URL in `.env`:

```javascript
import api from './api/client';

// GET request
const response = await api.get('/products');

// POST request
const response = await api.post('/products', data);
```

## Authentication

The API client automatically adds authentication tokens from localStorage:

```javascript
localStorage.setItem('token', 'your-auth-token');
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License.